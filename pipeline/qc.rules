# Copyright (c) 2018. Mount Sinai School of Medicine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This file contains QC-related processing rules.
"""

import glob
from os.path import join

def _get_all_fastq_files(_):
    return glob.glob("%s/*.fastq.gz" % WORKDIR)

rule fastqc:
  input:
    _get_all_fastq_files
  output:
    join(WORKDIR, "fastqc.done")
  params:
    outdir = join(WORKDIR, "fastqc-output")
  threads: _get_half_cores
  benchmark:
    join(BENCHMARKDIR, "fastqc.txt")
  shell:
    "mkdir -p {params.outdir} && "
    "fastqc -o {params.outdir} -t {threads} {input} && "
    "touch {output}"

rule bed_to_interval_list:
  input:
    sequence_dict = sequence_dict_output(),
    covered = join(GENOMEDIR, "{prefix}.bed")
  params:
    tmpdir = join(GENOMEDIR, "{prefix}_tmp")
  output:
    join(GENOMEDIR, "{prefix}.bed.interval_list")
  shell:
    "TMPDIR={params.tmpdir} "
    "picard -Djava.io.tmpdir={params.tmpdir} BedToIntervalList "
    "I={input.covered} "
    "O={output} "
    "SD={input.sequence_dict}"

if "capture_kit_coverage_file" in config["reference"]:
  rule hs_metrics:
    input:
      bam = join(WORKDIR, "{prefix}.bam"),
      target_interval_list = config["reference"]["capture_kit_coverage_file"] + ".interval_list"
    output:
      join(WORKDIR, "{prefix}_hs_metrics.txt")
    params:
      reference = config["reference"]["genome"],
      tmpdir = join(WORKDIR, "{prefix}_tmp"),
      mem_gb = _mem_gb_for_ram_hungry_jobs()
    resources:
      mem_mb = _mem_gb_for_ram_hungry_jobs() * 1024
    benchmark:
      join(BENCHMARKDIR, "{prefix}_hs_metrics.txt")
    log:
      join(LOGDIR, "{prefix}_hs_metrics.log")
    shell:
      "TMPDIR={params.tmpdir} "
      "picard -Xmx{params.mem_gb}g -Djava.io.tmpdir={params.tmpdir} "
      "CollectHsMetrics "
      "I={input.bam} "
      "O={output} "
      "R={params.reference} "
      "BAIT_INTERVALS={input.target_interval_list} "
      "TARGET_INTERVALS={input.target_interval_list} "
      "2> {log}"

  rule sequencing_qc:
    input:
      normal_hs_metrics = join(WORKDIR, "normal_aligned_coordinate_sorted_dups_indelreal_bqsr_hs_metrics.txt"),
      tumor_hs_metrics = join(WORKDIR, "tumor_aligned_coordinate_sorted_dups_indelreal_bqsr_hs_metrics.txt"),
    output:
      join(WORKDIR, "sequencing_qc_out.txt")
    shell:
      "python scripts/sequencing.py --out {output}"
